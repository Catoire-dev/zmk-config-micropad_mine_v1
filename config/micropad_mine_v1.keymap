#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define L_NUMPAD  0
#define L_GAME    1

/ {
    macros {
        e_acc_aigue: e_acc_aigue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(N0) &kp LA(N2) &kp LA(NUMBER_3) &kp LA(N3)>,
                <&macro_press>;

            label = "E_ACC_AIGUE";
        };

        e_acc_grave: e_acc_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(N0) &kp LA(N2) &kp LA(N3) &kp LA(N2)>,
                <&macro_tap>;

            label = "E_ACC_GRAVE";
        };

        e_acc_chap: e_acc_chap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(N0) &kp LA(N2) &kp LA(N3) &kp LA(N4)>,
                <&macro_release>;

            label = "E_ACC_CHAP";
        };

        c_cedil: c_cedil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp N0 &kp N2 &kp N3 &kp N1>;
            label = "C_CEDIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        game_layer {
            bindings = <
&kp LCTRL  &kp LEFT_SHIFT  &kp TAB  &kp ESCAPE
&kp P      &kp A           &kp Q    &kp NUMBER_1
&to 1      &kp S           &kp W    &kp NUMBER_2
&kp B      &kp D           &kp E    &kp NUMBER_3
&kp SPACE  &kp F           &kp R    &kp NUMBER_4
&none
            >;
        };

        numpad {
            bindings = <
&kp EQUAL     &kp SLASH     &kp ASTERISK  &kp MINUS
&kp N7        &kp N8        &kp N9        &kp PLUS
&kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LEFT_PARENTHESIS
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RIGHT_PARENTHESIS
&kp N0        &to 0         &kp DOT       &kp ENTER
&kp A
            >;
        };

        accent {
            bindings = <
&e_acc_aigue  &e_acc_grave  &e_acc_chap  &c_cedil
&trans        &trans        &trans       &trans
&trans        &trans        &trans       &trans
&trans        &trans        &trans       &trans
&trans        &trans        &trans       &trans
&trans
            >;
        };
    };
};
